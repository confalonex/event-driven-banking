spring:
  application:
    name: event-driven-banking # Nome dell'applicazione
  profiles:
    active: dev # Profilo attivo per l'ambiente di sviluppo

  cloud:
    stream:
      bindings:
        highValueConsumer-in-0:
          destination: high-value-transactions # Nome del topic Kafka per le transazioni ad alto valore
          group: high-value-group # Gruppo consumer per le transazioni ad alto valore
      kafka:
        binder:
          brokers: localhost:9092 # Broker Kafka

  kafka:
    bootstrap-servers: localhost:9092 # Indirizzo del broker Kafka
    streams:
      state-dir: /tmp/kafka-streams # Directory per lo stato di Kafka Streams
      properties:
        cleanup.on.start: true # Pulisce lo stato all'avvio
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer # Serializzatore per la chiave del produttore
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # Serializzatore per il valore del produttore
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # Deserializzatore per la chiave del consumatore
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer # Deserializzatore per il valore del consumatore
      group-id: banking-group # Gruppo consumer per le transazioni bancarie
      auto-offset-reset: earliest # Imposta il reset automatico dell'offset all'inizio del topic
      properties:
        spring.json.trusted.packages: it.alex.kafka.banking.model # specifica i pacchetti fidati per la deserializzazione
        spring.json.value.default.type: it.alex.kafka.banking.model.TransactionEvent # specifica il tipo di evento da deserializzare

logging:
  level:
    root: ERROR # pulisce i log di Spring Boot
    org.apache.kafka.streams.processor.internals.StateDirectory: OFF # disabilita i log di Kafka Streams
    it.alex.kafka.banking: INFO # log della nostra applicazione
